---
import QuoteshelfLayout from '@src/layouts/QuoteshelfLayout.astro';
import Book from '@src/components/quoteshelf/Book.astro';

import type { GetStaticPaths } from 'astro';
import { getCollection } from 'astro:content';
import uniq from 'lodash/uniq';
import groupBy from 'lodash/groupBy';

export const getStaticPaths = (async () => {
  const quoteshelf = await getCollection('quoteshelf');

  const slugs = quoteshelf.map(q => q.data.authorSlug);
  const paths = uniq(slugs).map((slug) => ({
    params: { author: slug }
  }));

  return paths;
}) satisfies GetStaticPaths;

const { author } = Astro.params;

const quoteshelf = await getCollection('quoteshelf');
const quotes = quoteshelf.filter((quote) => {
  return author === quote.data.authorSlug;
});

const fullName = quotes[0].data.author;

const quotesByTitle = groupBy(quotes, 'data.titleSlug');
const titleSlugs = Object.keys(quotesByTitle);
---

<QuoteshelfLayout title={`Quotes by ${fullName}`}>
  <div class="container tw-container tw-mx-auto">
    <h1>{fullName}</h1>
    <div x-data={JSON.stringify({ book: titleSlugs[0] })}>
      { titleSlugs.length > 1 ? (
          <sl-select value={titleSlugs[0]} x-on:sl-change="book = $event.target.value">
            { titleSlugs.map((titleSlug) => (
              <sl-option value={titleSlug}>{quotesByTitle[titleSlug][0].data.title}</sl-option>
            ))}
          </sl-select>
        ) : (
          <h2>{quotesByTitle[titleSlugs[0]][0].data.title}</h2>
        )
      }
      <article>
      { titleSlugs.map((titleSlug) => (
        <template x-if={`book === '${titleSlug}'`}>
          <Book quotes={quotesByTitle[titleSlug]} />
        </template>
      ))}
      </article>
    </div>
  </div>
</QuoteshelfLayout>

<style lang="scss">

  .container {
    padding: var(--size-fluid-4);
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  h1 {
    font-size: var(--font-size-fluid-3);
    font-family: var(--font-display);
  }

  h2 {
    text-align: center;
  }

</style>
