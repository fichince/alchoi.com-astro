---
import NavbarLayout from '@src/layouts/NavbarLayout.astro';
import Book from '@src/components/quoteshelf/Book.astro';

import type { GetStaticPaths } from 'astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import slugify from '@sindresorhus/slugify';
import { getImage } from 'astro:assets';
import qs from 'query-string';

export const getStaticPaths = (async () => {
  const quoteshelf = await getCollection('quoteshelf');
  const paths = quoteshelf.map((book) => {
    return {
      params: {
        author: slugify(book.data.author),
      },
    };
  });

  return paths;
}) satisfies GetStaticPaths;

const { author } = Astro.params;

const quoteshelf = await getCollection('quoteshelf');
const books = quoteshelf.filter((book) => {
  return author === slugify(book.data.author);
});

const fullName = books[0].data.author;

// TODO figure out the proper typescript for adding cover to the entry
const booksWithCovers = await Promise.all(books.map(async (book : CollectionEntry<'quoteshelf'>) => {

  try {
    const url = qs.stringifyUrl({
      url: 'https://openlibrary.org/search.json',
      query: {
        author: book.data.author,
        q: book.data.title,
      }
    });

    const response = await fetch(url);
    const info = await response.json();

    const coverId = info.docs[0]?.cover_i || null;

    if (coverId) {
      const coverUrl = `https://covers.openlibrary.org/b/id/${coverId}-M.jpg`;

      const image = await getImage({ src: coverUrl, formats: ['webp'], inferSize: true });
      console.log('got cover for', book.data.title);

      return {
        ...book,
        coverUrl: image.src,
      };
    } else {
      return book;
    }
  } catch (e) {
    console.log(`Error fetching cover for ${book.data.title}`, e);
    return book;
  }

}));


---

<NavbarLayout title={fullName}>
  <div class="container tw-container tw-mx-auto">
    <h1>{fullName}</h1>
    <div x-data={JSON.stringify({ book: booksWithCovers[0].slug })}>
      {/* TODO - only show this if there are multiple titles */}
      <sl-select value={booksWithCovers[0].slug} x-on:sl-change="book = $event.target.value">
        { booksWithCovers.map((book) => (
          <sl-option value={book.slug}>{book.data.title}</sl-option>
        ))}
      </sl-select>
      <article>
      { booksWithCovers.map((book) => (
        <template x-if={`book === '${book.slug}'`}>
          <Book book={book} />
        </template>
      ))}
      </article>
    </div>
  </div>
</NavbarLayout>

<style lang="scss">

  .container {
    padding: var(--size-fluid-4);
  }

  h1 {
    font-size: var(--font-size-fluid-3);
    font-family: var(--font-display);
  }

</style>
