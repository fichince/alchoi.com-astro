---

// this is a partial page, triggered by an HTMX request

export const prerender = false;
export const partial = true;

import { Client } from '@opensearch-project/opensearch';
import { renderMarkdown } from '@src/markdown';

type Result = {
  title: string;
  titleMatch?: string | null;
  url: string;
  matches: string[];
  quote?: string;
  author?: string;
  type: string;
}

function highlightOpts(includeAll = false) {
  const opts = {
    pre_tags: ['<mark>'],
    post_tags: ['</mark>'],
  };

  if (includeAll) {
    opts['number_of_fragments'] = 0;
  } else {
    opts['fragment_size'] = 25;
  }
  return opts;
}

const formData = await Astro.request.formData();
const q = formData.get('q') as string ?? '';

let results : Result[] = [];

if (q && q.trim().length > 0) {
  const client = new Client({ node: import.meta.env.OPENSEARCH_API });
  const indexName = `alchoi-blog-${import.meta.env.DEV ? 'development' : 'production'}`;

  const query = {
    _source: ['title', 'author', 'url', 'type'],
    query: {
      bool: {
        should: [
          {
            bool: {
              must: [
                {
                  term: { type: { value: 'blog' } }
                },
                {
                  multi_match: {
                    query: q,
                    fields: [ 'title^2', 'description^1.5', 'content' ],
                    fuzziness: 'AUTO',
                  },
                }
              ]
            }
          },
          {
            bool: {
              must: [
                {
                  term: { type: { value: 'quote' } }
                },
                {
                  match: {
                    quote: {
                      query: q,
                      fuzziness: 'AUTO',
                    }
                  },
                }
              ]
            }
          }
        ],
      }
    },
    highlight: {
      fields: {
        title: highlightOpts(false),
        description: highlightOpts(false),
        content: highlightOpts(false),
        quote: highlightOpts(true),
      }
    }
  };

  console.time('search');
  const response = await client.search({
    index: indexName,
    body: query,
  });
  console.timeEnd('search');

  results = (response?.body?.hits?.hits ?? []).map((hit) => {

    console.log('hit', hit);

    const result : Result = {
      title: hit?._source.title,
      url: hit?._source.url,
      matches: [],
      type: hit?._source.type,
    };

    if (hit?.highlight?.title) {
      result.titleMatch = hit.highlight.title[0];
    }

    if (hit?.highlight?.description) {
      result.matches = result.matches.concat(hit.highlight.description);
    }

    if (hit?.highlight?.content) {
      result.matches = result.matches.concat(hit.highlight.content);
    }

    if (hit?.highlight?.quote) {
      result.quote = renderMarkdown(hit.highlight.quote[0]);
      result.author = hit._source.author;
    }

    return result;
  });

}
---

{ results.length === 0 && q.length > 0 ?
  <div class="not-found result">
    <div class="title">
      Nothing found for <mark>{q}</mark>
    </div>
  </div>
  :
  <div>
  { results.map((result) => (
    <div class="result">
      { result.type === 'blog' && (
        <div class="title">
          <a href={result.url}>
            { result.titleMatch ?
              <Fragment set:html={result.titleMatch} />
            :
              <Fragment>{ result.title }</Fragment>
            }
          </a>
        </div>

        <ul class="body">
          { result.matches.map((match) => (
            <li>
              &hellip;<Fragment set:html={match} />&hellip;
            </li>
          ))}
        </ul>
      )}

      { result.type === 'quote' && (
        <div>
          <Fragment set:html={result.quote} />
        </div>
        <div>
          {result.title}
        </div>
        <div>
          {result.author}
        </div>
      )}
    </div>
  ))}
  </d>
}
