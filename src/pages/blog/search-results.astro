---

// this is a partial page, triggered by an HTMX request

export const prerender = false;
export const partial = true;

import { Client } from '@opensearch-project/opensearch';

type Result = {
  title: string;
  titleMatch?: string | null;
  url: string;
  matches: string[];
}

const formData = await Astro.request.formData();
const q = formData.get('q') as string ?? '';

let results : Result[] = [];

if (q && q.trim().length > 0) {
  const client = new Client({ node: import.meta.env.OPENSEARCH_API });
  const indexName = `alchoi-blog-${import.meta.env.DEV ? 'development' : 'production'}`;

  const highlightOpts = {
    fragment_size: 25,
    pre_tags: ['<mark>'],
    post_tags: ['</mark>'],
  };
  const query = {
    query: {
      multi_match: {
        query: q,
        fields: [ 'title^2', 'description^1.5', 'content' ],
        fuzziness: 'AUTO',
      },
    },
    highlight: {
      fields: {
        title: highlightOpts,
        description: highlightOpts,
        content: highlightOpts,
      }
    }
  };

  console.time('search');
  const response = await client.search({
    index: indexName,
    body: query,
  });
  console.timeEnd('search');

  results = (response?.body?.hits?.hits ?? []).map((hit) => {

    const result : Result = {
      title: hit?._source.title,
      url: hit?._source.url,
      matches: [],
    };

    if (hit?.highlight?.title) {
      result.titleMatch = hit.highlight.title[0];
    }

    if (hit?.highlight?.description) {
      result.matches = result.matches.concat(hit.highlight.description);
    }

    if (hit?.highlight?.content) {
      result.matches = result.matches.concat(hit.highlight.content);
    }

    return result;
  });

}
---

{ results.length === 0 && q.length > 0 ?
  <div class="not-found result">
    <div class="title">
      Nothing found for <mark>{q}</mark>
    </div>
  </div>
  :
  <>
  { results.map((result) => (
    <div class="result">
      <div class="title">
        <a href={result.url}>
          { result.titleMatch ?
            <Fragment set:html={result.titleMatch} />
          :
            <Fragment>{ result.title }</Fragment>
          }
        </a>
      </div>
      <ul class="body">
        { result.matches.map((match) => (
          <li>
            &hellip;<Fragment set:html={match} />&hellip;
          </li>
        ))}
      </ul>
    </div>
  ))}
  </>
}
