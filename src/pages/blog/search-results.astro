---

// this is a partial page, triggered by an HTMX request

export const prerender = false;
export const partial = true;

import { Client } from '@opensearch-project/opensearch';

type Result = {
  title: string;
  titleMatch?: string | null;
  url: string;
  matches: string[];
}

const formData = await Astro.request.formData();
const q = formData.get('q') as string ?? '';

let results : Result[] = [];

if (q && q.trim().length > 0) {
  const client = new Client({ node: import.meta.env.OPENSEARCH_API });
  const indexName = `alchoi-blog-${import.meta.env.MODE}`;

  // TODO weight the fields differently?
  // TODO fuzziness
  const highlightOpts = {
    fragment_size: 50,
    pre_tags: ['<mark>'],
    post_tags: ['</mark>'],
  };
  const query = {
    query: {
      bool: {
        should: [
          { match: { title: q } },
          { match: { description: q } },
          { match: { content: q } },
        ]
      }
    },
    highlight: {
      fields: {
        title: highlightOpts,
        description: highlightOpts,
        content: highlightOpts,
      }
    }
  };

  const response = await client.search({
    index: indexName,
    body: query,
  });

  results = (response?.body?.hits?.hits ?? []).map((hit) => {

    const result : Result = {
      title: hit?._source.title,
      url: hit?._source.url,
      matches: [],
    };

    if (hit?.highlight?.title) {
      result.titleMatch = hit.highlight.title[0];
    } else {
      if (hit?.highlight?.description) {
        result.matches = result.matches.concat(hit.highlight.description);
      } else if (hit?.highlight?.content) {
        result.matches = result.matches.concat(hit.highlight.content);
      }
    }

    return result;
  });

}
---

{ results.length === 0 && q.length > 0 ?
  <div class="not-found result">
    <div class="title">
      Nothing found for <mark>{q}</mark>
    </div>
  </div>
  :
  <>
  { results.map((result) => (
    <div class="result">
      <div class="title">
        <a href={result.url}>
          { result.titleMatch ?
            <Fragment set:html={result.titleMatch} />
          :
            <>
            { result.title }
            </>
          }
        </a>
      </div>
      <ul class="body">
        { result.matches.map((match) => (
          <li>
            &hellip;
            <Fragment set:html={match} />
            &hellip;
          </li>
        ))}
      </ul>
    </div>
  ))}
  </>
}
