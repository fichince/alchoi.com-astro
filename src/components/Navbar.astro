---
import Logo from "./Logo.astro";

const { pathname } = Astro.url;

const NAV = [
  { url: '/blog', label: 'Blog' },
  { url: '/code', label: 'Code' },
  { url: '/prose', label: 'Prose' },
];

---
<div class="navbar">
  <div class="logo">
    <a href="/">
      <Logo />
    </a>
  </div>
  <input type="checkbox" id="toggle" class="toggle" />
  <label for="toggle" class="toggle-label">
    <span></span>
  </label>

  <nav>
    <ul>
      {NAV.map(({ url, label }) => (
        <li class:list={{ active: pathname.startsWith(url) }}>
          <span class="symbol"></span>
          <a href={url}>
            {label}
          </a>
        </li>
      ))}
    </ul>
  </nav>
</div>
<style lang="scss">
  @import "../style/mixins.scss";

  .navbar {
    padding: var(--size-fluid-1);

    background: var(--primary);

    display: flex;
    align-items: center;

    position: sticky;
    top: 0;
    z-index: 999;
    width: 100%;
    height: var(--size-fluid-5);

    .logo {
      margin-left: var(--size-fluid-1);
      width: 150px;
    }

    .toggle {
      // make the checkbox not visible
      position: absolute !important;
      top: -9999px !important;
      left: -9999px !important;
    }

    .toggle-label {
      margin-left: auto;
      margin-right: var(--size-fluid-2);
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
      display: flex;
      align-items: center;

      // hamburger 
      & span, & span::before, & span::after {
        display: block;
        background: var(--secondary);
        height: 2px;
        width: 2em;
        border-radius: 2px;
        position: relative;
      }

      & span::before, & span::after {
        content: '';
        position: absolute;
      }

      & span::before {
        bottom: 7px;
      }
      & span::after {
        top: 7px;
      }
    }

    .toggle:checked ~ .toggle-label {
      & span, & span::before, & span::after {
        // TODO would be best to change the shape of the 
        // hamburger, instead of relying on colour only
        background: var(--highlight);
      }
    }

    --transition-duration: 300ms;
    --transition-fn: var(--ease-in-out-3);

    nav {
      font-family: var(--font-display);

      position: absolute;
      text-align: left;
      top: 100%;
      left: 0;
      background: var(--primary);
      width: 100%;
      transform: scale(1, 0);
      transform-origin: top;
      transition: transform var(--transition-duration) var(--transition-fn);

      ul {
        display: flex;
        flex-direction: column;
        align-items: center;

        height: 100%;

        font-size: var(--font-size-fluid-1);

        li {
          margin: var(--size-fluid-1) 0;
          a {
            opacity: 0;
            transition: opacity var(--transition-duration) var(--transition-fn);
            text-decoration: underline;
          }
        }
      }

    }

    .toggle:checked ~ nav {
      transform: scale(1, 1);
    }

    .toggle:checked ~ nav a {
      opacity: 1;
    }

    li.active {
      
      color: var(--highlight);
      .symbol::before {
        content: '\2192'; // show an arrow
      }
    }

    a {
      @include hover-link;
    }

    @include sm-up {
      .toggle-label {
        display: none;
      }

      justify-content: space-between;

      nav {
        position: relative;
        transform: none;
        top: initial;
        left: initial;
        transition: none;
        width: initial;
        height: 100%;

        ul {
          display: flex;
          flex-direction: row;
          li {
            margin-right: var(--size-3);

            a {
              opacity: 1;
            }
          }
        }
      }
    }
  }
</style>